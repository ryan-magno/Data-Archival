{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "CapatazADF"
		},
		"CapatazDBLinkedService_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'CapatazDBLinkedService'"
		},
		"DataLakeLinkedService_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'DataLakeLinkedService'"
		},
		"CapatazDBLinkedService_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "data-archival-server.database.windows.net"
		},
		"CapatazDBLinkedService_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "New-Capataz-Staging"
		},
		"CapatazDBLinkedService_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "sqladmin"
		},
		"DataLakeLinkedService_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://dataarchivalsa.dfs.core.windows.net/"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/CapatazDBLinkedService')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"server": "[parameters('CapatazDBLinkedService_properties_typeProperties_server')]",
					"database": "[parameters('CapatazDBLinkedService_properties_typeProperties_database')]",
					"encrypt": "mandatory",
					"trustServerCertificate": false,
					"authenticationType": "SQL",
					"userName": "[parameters('CapatazDBLinkedService_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('CapatazDBLinkedService_password')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DataLakeLinkedService')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('DataLakeLinkedService_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('DataLakeLinkedService_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/CapatazDB')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "CapatazDBLinkedService",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/CapatazDBLinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CapatazMetadata')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "CapatazDBLinkedService",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "TableName",
						"type": "nvarchar"
					},
					{
						"name": "IsActive",
						"type": "bit"
					},
					{
						"name": "ArchiveSequence",
						"type": "int",
						"precision": 10
					},
					{
						"name": "MinCreatedDate",
						"type": "datetime2",
						"scale": 7
					},
					{
						"name": "CreatedDate",
						"type": "datetime2",
						"scale": 7
					}
				],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/CapatazDBLinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SinkDatasetParquet')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "DataLakeLinkedService",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"FileName": {
						"type": "string"
					},
					"Directory": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().FileName",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().Directory",
							"type": "Expression"
						},
						"fileSystem": "capataz-datalake"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/DataLakeLinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Automated Pipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Metadata",
						"description": "Get the tables, year, month, and day to archive",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Update Metadata",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 3,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT \n    TableName,\n    ArchivalYear, \n    ArchivalMonth, \n    ArchivalDay\nFROM dbo.MetadataTable \nWHERE IsActive = 1;\n",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "CapatazMetadata",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Iterate the Tables",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Metadata",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Metadata').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"batchCount": 6,
							"activities": [
								{
									"name": "Start Monitoring",
									"type": "SqlServerStoredProcedure",
									"state": "Inactive",
									"onInactiveMarkAs": "Succeeded",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 3,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[StartMonitoring]",
										"storedProcedureParameters": {
											"PipelineRunID": {
												"value": {
													"value": "@pipeline().RunId",
													"type": "Expression"
												},
												"type": "String"
											},
											"TableName": {
												"value": {
													"value": "@item().TableName",
													"type": "Expression"
												},
												"type": "String"
											},
											"Year": {
												"value": {
													"value": "@item().ArchivalYear",
													"type": "Expression"
												},
												"type": "Int16"
											},
											"Month": {
												"value": {
													"value": "@item().ArchivalMonth",
													"type": "Expression"
												},
												"type": "Int16"
											},
											"Day": {
												"value": {
													"value": "@item().ArchivalDay",
													"type": "Expression"
												},
												"type": "Int16"
											}
										}
									}
								},
								{
									"name": "SQL Database to ADLS",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Start Monitoring",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 3,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "@if(\n    or(\n        equals(item().TableName, 'ProfileTimeKeepingWhosWorkings'),\n        equals(item().TableName, 'ProfileTimeKeepingWhosWorkings.Archived')\n    ),\n    concat(\n        'SELECT * FROM [', item().TableName, '] WITH (NOLOCK) WHERE YEAR([DateTimeInOut]) = ', item().ArchivalYear, \n        ' AND MONTH([DateTimeInOut]) = ', item().ArchivalMonth, \n        ' AND DAY([DateTimeInOut]) = ', item().ArchivalDay\n    ),\n    concat(\n        'SELECT * FROM [', item().TableName, '] WITH (NOLOCK) WHERE YEAR([CreatedDate]) = ', item().ArchivalYear, \n        ' AND MONTH([CreatedDate]) = ', item().ArchivalMonth, \n        ' AND DAY([CreatedDate]) = ', item().ArchivalDay\n    )\n)\n",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "CapatazDB",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "SinkDatasetParquet",
											"type": "DatasetReference",
											"parameters": {
												"FileName": {
													"value": "@concat(item().ArchivalYear, '-', item().ArchivalMonth, '-', item().ArchivalDay, ' - ', pipeline().RunId, '.parquet')\n",
													"type": "Expression"
												},
												"Directory": {
													"value": "@concat(replace(item().TableName, '.Archived', ''), '/', item().ArchivalYear, '/', item().ArchivalMonth, '/')\n",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Update Monitoring Table",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "SQL Database to ADLS",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 3,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[ManageMonitoring]",
										"storedProcedureParameters": {
											"Remarks": {
												"value": {
													"value": "@activity('SQL Database to ADLS').error",
													"type": "Expression"
												},
												"type": "String"
											},
											"Read": {
												"value": {
													"value": "@activity('SQL Database to ADLS').output.rowsCopied",
													"type": "Expression"
												},
												"type": "Int16"
											},
											"Write": {
												"value": {
													"value": "@activity('SQL Database to ADLS').output.rowsRead",
													"type": "Expression"
												},
												"type": "Int16"
											},
											"TableName": {
												"value": {
													"value": "@item().TableName",
													"type": "Expression"
												},
												"type": "String"
											},
											"PipelineRunID": {
												"value": {
													"value": "@pipeline().RunId",
													"type": "Expression"
												},
												"type": "String"
											},
											"Year": {
												"value": {
													"value": "@item().ArchivalYear",
													"type": "Expression"
												},
												"type": "Int16"
											},
											"Month": {
												"value": {
													"value": "@item().ArchivalMonth",
													"type": "Expression"
												},
												"type": "Int16"
											},
											"Day": {
												"value": {
													"value": "@item().ArchivalDay",
													"type": "Expression"
												},
												"type": "Int16"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "CapatazDBLinkedService",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "Log Copy Errors",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "SQL Database to ADLS",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 3,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[LogError]",
										"storedProcedureParameters": {
											"Errors": {
												"value": {
													"value": "@concat('Errors: ', string(activity('SQL Database to ADLS').output.errors))\n",
													"type": "Expression"
												},
												"type": "String"
											},
											"TableName": {
												"value": {
													"value": "@item().TableName",
													"type": "Expression"
												},
												"type": "String"
											},
											"PipelineRunID": {
												"value": {
													"value": "@pipeline().RunId",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "CapatazDBLinkedService",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "If Condition for Data Validation",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "Update Monitoring Table",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@equals(variables('Read'), variables('Write'))",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "Fail Activity",
												"type": "Fail",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"message": {
														"value": "Row count mismatch detected. Source row count: @{variables('Read')}, Sink row count: @{variables('Write')}.\n",
														"type": "Expression"
													},
													"errorCode": {
														"value": "RowCountMismatch",
														"type": "Expression"
													}
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "Delete Archived Data",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 3,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[[dbo].[DeleteArchivedData]",
													"storedProcedureParameters": {
														"Day": {
															"value": {
																"value": "@item().ArchivalDay",
																"type": "Expression"
															},
															"type": "Int16"
														},
														"Month": {
															"value": {
																"value": "@item().ArchivalMonth",
																"type": "Expression"
															},
															"type": "Int16"
														},
														"PipelineRunID": {
															"value": {
																"value": "@pipeline().RunId",
																"type": "Expression"
															},
															"type": "String"
														},
														"Year": {
															"value": {
																"value": "@item().ArchivalYear",
																"type": "Expression"
															},
															"type": "Int16"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "CapatazDBLinkedService",
													"type": "LinkedServiceReference"
												}
											},
											{
												"name": "Log Deletion Errors",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [
													{
														"activity": "Delete Archived Data",
														"dependencyConditions": [
															"Failed"
														]
													}
												],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 3,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[[dbo].[LogError]",
													"storedProcedureParameters": {
														"Errors": {
															"value": {
																"value": "@concat('Errors: ', string(activity('Delete Archived Data').output.message))\n",
																"type": "Expression"
															},
															"type": "String"
														},
														"TableName": {
															"value": {
																"value": "@item().TableName",
																"type": "Expression"
															},
															"type": "String"
														},
														"PipelineRunID": {
															"value": {
																"value": "@pipeline().RunId",
																"type": "Expression"
															},
															"type": "String"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "CapatazDBLinkedService",
													"type": "LinkedServiceReference"
												}
											}
										]
									}
								}
							]
						}
					},
					{
						"name": "Update Metadata",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 3,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[UpdateMetadata]",
							"storedProcedureParameters": {
								"RetentionMonth": {
									"value": "12",
									"type": "Int16"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "CapatazDBLinkedService",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Send Email",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Email Contents",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 3,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "POST",
							"headers": {},
							"url": "https://prod-53.southeastasia.logic.azure.com:443/workflows/9d03871925c7476eaada332752f94139/triggers/When_a_HTTP_request_is_received/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2FWhen_a_HTTP_request_is_received%2Frun&sv=1.0&sig=oscBaQ3CM6o9Wl0kcmEw8rA9tDTyo3bAeNbYADRHa2M",
							"body": {
								"value": "{\n    \"PipelineRunID\": \"@{pipeline().RunId}\",\n    \"ReadSum\": \"@{activity('Email Contents').output.firstRow.ReadSum}\",\n    \"WriteSum\": \"@{activity('Email Contents').output.firstRow.WriteSum}\",\n    \"RemainingSum\": \"@{activity('Email Contents').output.firstRow.RemainingSum}\",\n    \"DatabaseName\": \"@{activity('Email Contents').output.firstRow.DatabaseName}\",\n    \"Year\": \"@{activity('Email Contents').output.firstRow.Year}\",\n    \"Month\": \"@{activity('Email Contents').output.firstRow.MonthName}\",\n    \"Day\": \"@{activity('Email Contents').output.firstRow.Day}\",\n    \"Status\": \"@{activity('Email Contents').output.firstRow.Status}\",\n    \"Remarks\": \"@{activity('Email Contents').output.firstRow.Remarks}\",\n    \"DateToday\": \"@{activity('Email Contents').output.firstRow.DateToday}\"\n}",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Email Contents",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Iterate the Tables",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 3,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT \n    SUM([Read]) AS ReadSum,\n    SUM([Write]) AS WriteSum,\n    SUM([Remaining]) AS RemainingSum,\n    DB_NAME() AS DatabaseName,\n    [Year],\n    DATENAME(MONTH, DATEFROMPARTS(Year, Month, 1)) AS MonthName,\n    [Day],\n    CASE \n        WHEN MAX(CASE WHEN Status = 'Failed' THEN 1 ELSE 0 END) = 1 THEN 'Failed'\n        ELSE 'Success'\n    END AS FinalStatus,\n    Remarks,\n    FORMAT(\n        GETUTCDATE() AT TIME ZONE 'UTC' AT TIME ZONE 'Singapore Standard Time', \n        'MMMM dd, yyyy'\n    ) AS DateToday\nFROM ArchivalMonitoring\nWHERE PipelineRunID = '@{pipeline().RunId}'\nGROUP BY [Year], [Month], [Day], [Remarks];\n",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "CapatazDB",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"MetadataTableName": {
						"type": "string",
						"defaultValue": "dbo.MetadataTable"
					}
				},
				"variables": {
					"Read": {
						"type": "String",
						"defaultValue": "0"
					},
					"Write": {
						"type": "String",
						"defaultValue": "0"
					},
					"Deleted": {
						"type": "Integer"
					}
				},
				"annotations": [],
				"lastPublishTime": "2024-12-28T05:58:24Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/CapatazMetadata')]",
				"[concat(variables('factoryId'), '/linkedServices/CapatazDBLinkedService')]",
				"[concat(variables('factoryId'), '/datasets/CapatazDB')]",
				"[concat(variables('factoryId'), '/datasets/SinkDatasetParquet')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Manual Pipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Metadata",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 3,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT TableName FROM dbo.MetadataTable WHERE IsActive = 1",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "CapatazMetadata",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Iterate the Tables",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Metadata",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Metadata').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"batchCount": 6,
							"activities": [
								{
									"name": "Start Monitoring",
									"type": "SqlServerStoredProcedure",
									"state": "Inactive",
									"onInactiveMarkAs": "Succeeded",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 3,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[StartMonitoring]",
										"storedProcedureParameters": {
											"PipelineRunID": {
												"value": {
													"value": "@pipeline().RunId",
													"type": "Expression"
												},
												"type": "String"
											},
											"TableName": {
												"value": {
													"value": "@item().TableName",
													"type": "Expression"
												},
												"type": "String"
											},
											"Year": {
												"value": {
													"value": "@variables('Year')",
													"type": "Expression"
												},
												"type": "Int16"
											},
											"Month": {
												"value": {
													"value": "@variables('Month')",
													"type": "Expression"
												},
												"type": "Int16"
											},
											"Day": {
												"value": {
													"value": "@variables('Day')",
													"type": "Expression"
												},
												"type": "Int16"
											}
										}
									}
								},
								{
									"name": "SQL Database to ADLS",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Start Monitoring",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 3,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "@if(\n    or(\n        equals(item().TableName, 'ProfileTimeKeepingWhosWorkings'),\n        equals(item().TableName, 'ProfileTimeKeepingWhosWorkings.Archive')\n    ),\n    concat(\n        'SELECT * FROM [', item().TableName, '] WITH (NOLOCK) WHERE YEAR([DateTimeInOut]) = ', variables('Year'), \n        ' AND MONTH([DateTimeInOut]) = ', variables('Month'), \n        if(\n            or(\n                or(equals(variables('Day'), null), equals(variables('Day'), '')), \n                equals(variables('Day'), 0)\n            ), \n            '', \n            concat(' AND DAY([DateTimeInOut]) = ', variables('Day'))\n        )\n    ),\n    concat(\n        'SELECT * FROM [', item().TableName, '] WITH (NOLOCK) WHERE YEAR([CreatedDate]) = ', variables('Year'), \n        ' AND MONTH([CreatedDate]) = ', variables('Month'), \n        if(\n            or(\n                or(equals(variables('Day'), null), equals(variables('Day'), '')), \n                equals(variables('Day'), 0)\n            ), \n            '', \n            concat(' AND DAY([CreatedDate]) = ', variables('Day'))\n        )\n    )\n)\n",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "CapatazDB",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "SinkDatasetParquet",
											"type": "DatasetReference",
											"parameters": {
												"FileName": {
													"value": "@concat(\n    variables('Year'), '-', \n    variables('Month'), \n    if(equals(variables('Day'), ''), '', concat('-', variables('Day'))),\n    ' - ', pipeline().RunId, '.parquet'\n)\n",
													"type": "Expression"
												},
												"Directory": {
													"value": "@concat(replace(item().TableName, '.Archived', ''), '/', variables('Month'), '/')",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Update Monitoring Table",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "SQL Database to ADLS",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 3,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[ManageMonitoring]",
										"storedProcedureParameters": {
											"Remarks": {
												"value": {
													"value": "@activity('SQL Database to ADLS').error",
													"type": "Expression"
												},
												"type": "String"
											},
											"Write": {
												"value": {
													"value": "@activity('SQL Database to ADLS').output.rowsCopied",
													"type": "Expression"
												},
												"type": "Int16"
											},
											"Read": {
												"value": {
													"value": "@activity('SQL Database to ADLS').output.rowsRead",
													"type": "Expression"
												},
												"type": "Int16"
											},
											"TableName": {
												"value": {
													"value": "@item().TableName",
													"type": "Expression"
												},
												"type": "String"
											},
											"PipelineRunID": {
												"value": {
													"value": "@pipeline().RunId",
													"type": "Expression"
												},
												"type": "String"
											},
											"Year": {
												"value": {
													"value": "@variables('Year')",
													"type": "Expression"
												},
												"type": "Int16"
											},
											"Month": {
												"value": {
													"value": "@variables('Month')",
													"type": "Expression"
												},
												"type": "Int16"
											},
											"Day": {
												"value": {
													"value": "@variables('Day')",
													"type": "Expression"
												},
												"type": "Int16"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "CapatazDBLinkedService",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "Log Copy Errors",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "SQL Database to ADLS",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 3,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[LogError]",
										"storedProcedureParameters": {
											"Remarks": {
												"value": {
													"value": "@concat('Errors: ', string(activity('SQL Database to ADLS').output.errors))\n",
													"type": "Expression"
												},
												"type": "String"
											},
											"TableName": {
												"value": {
													"value": "@item().TableName",
													"type": "Expression"
												},
												"type": "String"
											},
											"PipelineRunID": {
												"value": {
													"value": "@pipeline().RunId",
													"type": "Expression"
												}
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "CapatazDBLinkedService",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "If Condition for Data Validation",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "Update Monitoring Table",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@equals(variables('Read'), variables('Write'))",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "Fail Activity",
												"type": "Fail",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"message": {
														"value": "Row count mismatch detected. Source row count: @{variables('Read')}, Sink row count: @{variables('Write')}.\n",
														"type": "Expression"
													},
													"errorCode": {
														"value": "RowCountMismatch",
														"type": "Expression"
													}
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "Delete Archived Data",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[[dbo].[DeleteArchivedData]",
													"storedProcedureParameters": {
														"Day": {
															"value": {
																"value": "@variables('Day')",
																"type": "Expression"
															},
															"type": "Int16"
														},
														"Month": {
															"value": {
																"value": "@variables('Month')",
																"type": "Expression"
															},
															"type": "Int16"
														},
														"PipelineRunID": {
															"value": {
																"value": "@pipeline().RunId",
																"type": "Expression"
															},
															"type": "String"
														},
														"Year": {
															"value": {
																"value": "@variables('Year')",
																"type": "Expression"
															},
															"type": "Int16"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "CapatazDBLinkedService",
													"type": "LinkedServiceReference"
												}
											},
											{
												"name": "Log Deletion Errors",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [
													{
														"activity": "Delete Archived Data",
														"dependencyConditions": [
															"Failed"
														]
													}
												],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[[dbo].[LogError]",
													"storedProcedureParameters": {
														"Remarks": {
															"value": {
																"value": "@concat('Errors: ', string(activity('Delete Archived Data').output.message))\n\n",
																"type": "Expression"
															},
															"type": "String"
														},
														"TableName": {
															"value": {
																"value": "@item().TableName",
																"type": "Expression"
															},
															"type": "String"
														},
														"PipelineRunID": {
															"value": {
																"value": "@pipeline().RunId",
																"type": "Expression"
															},
															"type": "String"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "CapatazDBLinkedService",
													"type": "LinkedServiceReference"
												}
											}
										]
									}
								},
								{
									"name": "RowCountDeleted Value and Errors",
									"type": "Lookup",
									"state": "Inactive",
									"onInactiveMarkAs": "Succeeded",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 3,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "SELECT RowCountDeleted, Errors\nFROM dbo.ArchivalMonitoring\nWHERE TableName = '@{item().TableName}'\n  AND PipelineRunID = '@{pipeline().RunId}'",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										}
									}
								},
								{
									"name": "Emailing Data",
									"type": "SetVariable",
									"state": "Inactive",
									"onInactiveMarkAs": "Succeeded",
									"dependsOn": [
										{
											"activity": "RowCountDeleted Value and Errors",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "AuditData",
										"value": {
											"value": "@concat(variables('AuditData'), [\n  {\n    \"TableName\": \"@{item().TableName}\",\n    \"RowsRead\": \"@{activity('SQL Database to ADLS').output.rowsRead}\",\n    \"RowsCopied\": \"@{activity('SQL Database to ADLS').output.rowsCopied}\",\n    \"RowCountDeleted\": \"@{activity('RowCountDeleted Value and Errors').output.firstRow.RowCountDeleted}\",\n    \"Errors\": \"@{activity('RowCountDeleted Value and Errors').output.firstRow.Errors}\",\n    \"Year\": \"@{variables('Year')}\",\n    \"Month\": \"@{variables('Month')}\",\n    \"Day\": \"@{variables('Day')}\",\n    \"TriggerTime\": \"@{formatDateTime(addHours(pipeline().TriggerTime, 8), 'yyyy-MM-ddTHH:mm:ssZ')}\"\n  }\n])\n",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "Send Email",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Email Contents",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 3,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "POST",
							"headers": {},
							"url": {
								"value": "https://prod-53.southeastasia.logic.azure.com:443/workflows/9d03871925c7476eaada332752f94139/triggers/When_a_HTTP_request_is_received/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2FWhen_a_HTTP_request_is_received%2Frun&sv=1.0&sig=oscBaQ3CM6o9Wl0kcmEw8rA9tDTyo3bAeNbYADRHa2M",
								"type": "Expression"
							},
							"body": {
								"value": "{\n    \"PipelineRunID\": \"@{pipeline().RunId}\",\n    \"ReadSum\": \"@{activity('Email Contents').output.firstRow.ReadSum}\",\n    \"WriteSum\": \"@{activity('Email Contents').output.firstRow.WriteSum}\",\n    \"RemainingSum\": \"@{activity('Email Contents').output.firstRow.RemainingSum}\",\n    \"DatabaseName\": \"@{activity('Email Contents').output.firstRow.DatabaseName}\",\n    \"Year\": \"@{activity('Email Contents').output.firstRow.Year}\",\n    \"Month\": \"@{activity('Email Contents').output.firstRow.MonthName}\",\n    \"Day\": \"@{activity('Email Contents').output.firstRow.Day}\",\n    \"Status\": \"@{activity('Email Contents').output.firstRow.Status}\",\n    \"Remarks\": \"@{activity('Email Contents').output.firstRow.Remarks}\",\n    \"DateToday\": \"@{activity('Email Contents').output.firstRow.DateToday}\"\n}\n",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Email Contents",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Iterate the Tables",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT \n    SUM([Read]) AS ReadSum,\n    SUM([Write]) AS WriteSum,\n    SUM([Remaining]) AS RemainingSum,\n    DB_NAME() AS DatabaseName,\n    [Year],\n    DATENAME(MONTH, DATEFROMPARTS(Year, Month, 1)) AS MonthName,\n    [Day],\n    CASE \n        WHEN MAX(CASE WHEN Status = 'Failed' THEN 1 ELSE 0 END) = 1 THEN 'Failed'\n        ELSE 'Success'\n    END AS FinalStatus,\n    Remarks,\n    FORMAT(\n        GETUTCDATE() AT TIME ZONE 'UTC' AT TIME ZONE 'Singapore Standard Time', \n        'MMMM dd, yyyy'\n    ) AS DateToday\nFROM ArchivalMonitoring\nWHERE PipelineRunID = '@{pipeline().RunId}'\nGROUP BY [Year], [Month], [Day], [Remarks];",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "CapatazDB",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"MetadataTableName": {
						"type": "string",
						"defaultValue": "dbo.MetadataTable"
					}
				},
				"variables": {
					"Read": {
						"type": "String",
						"defaultValue": "0"
					},
					"Write": {
						"type": "String",
						"defaultValue": "0"
					},
					"Year": {
						"type": "Integer",
						"defaultValue": 2023
					},
					"Month": {
						"type": "Integer",
						"defaultValue": 5
					},
					"Day": {
						"type": "Integer",
						"defaultValue": 11
					}
				},
				"annotations": [],
				"lastPublishTime": "2024-12-28T05:58:24Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/CapatazMetadata')]",
				"[concat(variables('factoryId'), '/datasets/CapatazDB')]",
				"[concat(variables('factoryId'), '/datasets/SinkDatasetParquet')]",
				"[concat(variables('factoryId'), '/linkedServices/CapatazDBLinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/trigger1')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "Automated Pipeline",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Hour",
						"interval": 24,
						"startTime": "2024-12-31T00:00:00",
						"timeZone": "China Standard Time"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/Automated Pipeline')]"
			]
		}
	]
}